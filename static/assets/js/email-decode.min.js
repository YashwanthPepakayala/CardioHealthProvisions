// !function(){"use strict";function e(e){try{if("undefined"==typeof console)return;"error"in console?console.error(e):console.log(e)}catch(e){}}function t(e){return d.innerHTML='<a href="'+e.replace(/"/g,"&quot;")+'"></a>',d.childNodes[0].getAttribute("href")||""}function r(e,t){var r=e.substr(t,2);return parseInt(r,16)}function n(n,c){for(var o="",a=r(n,c),i=c+2;i<n.length;i+=2){var l=r(n,i)^a;o+=String.fromCharCode(l)}try{o=decodeURIComponent(escape(o))}catch(u){e(u)}return t(o)}function c(t){for(var r=t.querySelectorAll("a"),c=0;c<r.length;c++)try{var o=r[c],a=o.href.indexOf(l);a>-1&&(o.href="mailto:"+n(o.href,a+l.length))}catch(i){e(i)}}function o(t){for(var r=t.querySelectorAll(u),c=0;c<r.length;c++)try{var o=r[c],a=o.parentNode,i=o.getAttribute(f);if(i){var l=n(i,0),d=document.createTextNode(l);a.replaceChild(d,o)}}catch(h){e(h)}}function a(t){for(var r=t.querySelectorAll("template"),n=0;n<r.length;n++)try{i(r[n].content)}catch(c){e(c)}}function i(t){try{c(t),o(t),a(t)}catch(r){e(r)}}var l="/cdn-cgi/l/email-protection#",u=".__cf_email__",f="data-cfemail",d=document.createElement("div");i(document),function(){var e=document.currentScript||document.scripts[document.scripts.length-1];e.parentNode.removeChild(e)}()}();


(function() {
    "use strict";
  
    function logError(errorMessage) {
      try {
        if (typeof console === "undefined") return;
        if ("error" in console) {
          console.error(errorMessage);
        } else {
          console.log(errorMessage);
        }
      } catch (error) {
        logError(error);
      }
    }
  
    function getDecryptedEmail(email) {
      return decodeURIComponent(escape(email));
    }
  
    function getCharCode(hexString, index) {
      return parseInt(hexString.substr(index, 2), 16);
    }
  
    function decryptEmail(encodedEmail, position) {
      var decryptedEmail = "";
      var xorKey = getCharCode(encodedEmail, position);
  
      for (var i = position + 2; i < encodedEmail.length; i += 2) {
        var charCode = getCharCode(encodedEmail, i) ^ xorKey;
        decryptedEmail += String.fromCharCode(charCode);
      }
  
      try {
        decryptedEmail = getDecryptedEmail(decryptedEmail);
      } catch (error) {
        logError(error);
      }
  
      return getSafeEmail(decryptedEmail);
    }
  
    function replaceEmailLinks(documentElement) {
      var emailElements = documentElement.querySelectorAll("a");
  
      for (var i = 0; i < emailElements.length; i++) {
        try {
          var element = emailElements[i];
          var href = element.href.indexOf(emailProtection);
  
          if (href > -1) {
            element.href = "mailto:" + decryptEmail(element.href, href + emailProtection.length);
          }
        } catch (error) {
          logError(error);
        }
      }
    }
  
    function replaceObfuscatedEmails(documentElement) {
      var obfuscatedElements = documentElement.querySelectorAll(emailClass);
  
      for (var i = 0; i < obfuscatedElements.length; i++) {
        try {
          var element = obfuscatedElements[i];
          var parent = element.parentNode;
          var encryptedEmail = element.getAttribute(emailAttribute);
  
          if (encryptedEmail) {
            var decryptedEmail = decryptEmail(encryptedEmail, 0);
            var textNode = document.createTextNode(decryptedEmail);
            parent.replaceChild(textNode, element);
          }
        } catch (error) {
          logError(error);
        }
      }
    }
  
    function replaceTemplates(documentElement) {
      var templateElements = documentElement.querySelectorAll("template");
  
      for (var i = 0; i < templateElements.length; i++) {
        try {
          var content = templateElements[i].content;
          replaceEmailLinks(content);
          replaceObfuscatedEmails(content);
          replaceTemplates(content);
        } catch (error) {
          logError(error);
        }
      }
    }
  
    var emailProtection = "/cdn-cgi/l/email-protection#";
    var emailClass = ".__cf_email__";
    var emailAttribute = "data-cfemail";
  
    function init(documentElement) {
      try {
        replaceEmailLinks(documentElement);
        replaceObfuscatedEmails(documentElement);
        replaceTemplates(documentElement);
      } catch (error) {
        logError(error);
      }
    }
  
    function getSafeEmail(email) {
      // Implement your safe email handling logic here if needed
      return email; // Default behavior, can be customized
    }
  
    // Initiate the decoding process on the current document
    init(document);
  
  })();
  